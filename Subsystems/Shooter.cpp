// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Shooter.h"
#include "../Robotmap.h"
Shooter::Shooter() : PIDSubsystem("Shooter", SHOOTER_P, SHOOTER_I, SHOOTER_D) {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	shooterTalon1 = RobotMap::shooterShooterTalon1;
	shooterEncoder = RobotMap::shooterShooterEncoder;
	shooterTalon2 = RobotMap::shooterShooterTalon2;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	shooterTime = new Timer();
	shooterTime->Reset();
	shooterTime->Start();
	previousCount = 0;
	prevValue = 0;
	//shooterEncoder->SetMaxPeriod(3.0f);
	shooterEncoder->Start();
	GetPIDController()->SetOutputRange(0,1);
}
    
void Shooter::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void Shooter::SetWheelSpeed(float speed)
{
	shooterTalon1->Set(speed);
	shooterTalon2->Set(speed);	
}
double Shooter::ReturnPIDInput()
{
	return GetRPM();
}
void Shooter::UsePIDOutput(double output)
{
	SetWheelSpeed(output);
}
void Shooter::SetSpeed(double speed)
{
	SetSetpoint(speed);
	Enable();
}
bool Shooter::AtSetpoint()
{
	return fabs(GetPosition() - GetSetpoint()) < SHOOTER_THRESHOLD;
}
void Shooter::Stop()
{
	Disable();
	shooterTalon1->Set(0.0);
	shooterTalon2->Set(0.0);
}
double Shooter::GetRPM()
{
	double rpm = (1.0f / shooterEncoder->GetPeriod()) * 60.0f;
	if( !(rpm < 12000))
		rpm = GetPIDController()->GetSetpoint();
	return rpm;
}
void Shooter::SetPID(float p, float i, float d)
{
	GetPIDController()->SetPID(p,i,d);
}
float Shooter::GetP()
{
	return GetPIDController()->GetP();
}
float Shooter::GetI()
{
	return GetPIDController()->GetI();
}
float Shooter::GetD()
{
	return GetPIDController()->GetD();
}
